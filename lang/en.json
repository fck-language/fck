{
  "keywords": {
    "int": "int",
    "float": "float",
    "bool": "bool",
    "list": "list",
    "str": "str",
    "imag": "imag",
    "auto": "auto",
    "and": "and",
    "or": "or",
    "not": "not",
    "not_char": "not_char",
    "if": "if",
    "else": "else",
    "elif": "elif",
    "case": "case",
    "option": "option",
    "default": "default",
    "iterate": "iterate",
    "to": "to",
    "import": "import",
    "step": "step",
    "while": "while",
    "def": "def",
    "return": "return",
    "continue": "continue",
    "break": "break",
    "silent": "silent",
    "as": "as"
  },
  "errors": {
    "error": "error"
  },
  "warnings": {
    "warning": "warning",
    "WT_DivideByZero" : {
      "explain":"Divide by zero. Returned infinity",
      "cli_explain":{
        "full":"Raised when dividing by zero. Returns an infinity.",
        "example": "13 / 0 -> <Infinity (13)>"
      }
    },
    "WT_ModByZero" : {
      "explain": "Modulo by zero. Returned 0",
      "cli_explain": {
        "full": "Raised when calculating a % 0. Returns 0",
        "example": "5 % 0 -> 0"
      }
    },
    "WT_ValueMultString" : {
      "explain": "Value multiplied by string. Returned string multiplied by value",
      "cli_explain": {
        "full": "Raised when multiplying a value by a string. Included due to bad practice. Returns string multiplied by the value:",
        "example": "'hello! ' * 3 -> 'hello! hello! hello! '"
      }
    },
    "WT_StringMultFloat" : {
      "explain": "String was multiplied by a float. Value has been rounded",
      "cli_explain": {
        "full": "Raised when multiplying a string by a float value. Rounds the float value to an int",
        "example": "'string_' * 3.14 -> 'string_string_string_'"
      }
    },
    "WT_InfinityDivValue" : {
      "explain": "Infinity divided by value. Returned infinity",
      "cli_explain": {
        "full": "Raised when an infinity is divided by a value. Returns an infinity where the saved value is divided by the given value",
        "example": "<Infinity (10)> / 2 -> <Infinity (5)>"
      }
    },
    "WT_ValueDivInfinity" : {
      "explain": "Value divided by infinity. Returned zero",
      "cli_explain": {
        "full": "Raised when a value is divided by an infinity. Returns 0",
        "example": "-4 / <Infinity (5)> -> 0"
      }
    },
    "WT_InfinityDivInfinity" : {
      "explain": "Infinity divided by infinity. Returned zero",
      "cli_explain": {
        "full": "Raised when an infinity is divided by another infinity. Returns the saved value of the first infinity divided by the saved value of the second infinity",
        "example": "<Infinity (12)> / <Infinity (3)> -> <Infinity (4)>"
      }
    },
    "WT_ListFromValue" : {
      "explain": "List assigned to a value. Value has been converted into a list",
      "cli_explain": {
        "full": "Raised when a value is assigned to a list variable. Converts the value into a list containing the value",
        "example": ">>> list example :> 'hello' (warning line)\n['hello']"
      }
    },
    "WT_ListIndexOutOfRange" : {
      "explain": "Index for list was out of range. Changed value to fit list range",
      "cli_explain": {
        "full": "Raised when the given range extends outside of the range of the given list. Alters the range to fit inside the list.",
        "example": ">>> list example :: [1, 5, -3, 12]\n>>> example[10] (warning line)\n12"
      }
    },
    "WT_ListIndexFloat" : {
      "explain": "Given index for list was a float. Rounded value",
      "cli_explain": {
        "full": "Raised when the given range for a list contains a float. The float value is rounded",
        "example": ">>> list example :: [2, 7, -3, 'hello']\n>>> example[1.2] (warning line)\n7"
      }
    },
    "WT_SilentCaseResetDefault" : {
      "explain": "Case type default option was redefined",
      "cli_explain": {
        "full": "Raised when a new option for a silent<case> variable has the same expression as an already specified option. Replaces the old option statement with the new option statement",
        "example": ">>> silent<case> example :: case(5) {\n... \toption(3) {\n... \t\tlog('hello')\n... \t}\n... }\n>>> example.new_option(3, print('hello')) (warning line)"
      }
    },
    "WT_IterateStepLoop" : {
      "explain": "Given step value would result in an infinite loop. Step value has been changed",
      "cli_explain": {
        "full": "Raised when the given step value of an iterate loop would result in the loop never reaching the second value. The step value is multiplied by -1.",
        "example": "iterate 1 to 2 step -0.1 {}"
      }
    },
    "WT_IterateStepZero" : {
      "explain": "Given step value would result in an infinite loop. Step value has been ignored and the default value of 1 or -1 used instead",
      "cli_explain": {
        "full": "Raised when the given step value of an iterate loop evaluates to 0. Step value is ignores and the default value is used.",
        "example": "iterate 10 step 0 {}"
      }
    },
    "WT_ValueFromList" : {
      "explain": "Numerical variable assigned to a list with one element. Changed list to single value",
      "cli_explain": {
        "full": "Raised when a list is assigned to either an int, float, sfloat, or str. Value in the list is used instead of the list. Only raised if the list recursively has 1 element and the type of the single element can be used with the variable type.",
        "example": ">> int example :> [[['1.3']]] (warning line)\n1"
      }
    },
    "WT_ValueFromString" : {
      "explain": "Numerical variable assigned to a string. Changed string into a value",
      "cli_explain": {
        "full": "Raised when a string is assigned to either an int, float, or sfloat. String is converted into a value",
        "example": ">>> float example :> '-13.9' (warning line)\n-13.9"
      }
    },
    "WT_StringFromValue" : {
      "explain": "Numerical value assigned to a str. Converted the value into a string",
      "cli_explain": {
        "full": "Raised when a value is assigned to a string variable. Value is converted into a string",
        "example": ">>> str example :> 15 (warning line)\n'15'"
      }
    },
    "WT_NoStringEnd" : {
      "explain": "First string delimiter had no ending delimiter on the same line",
      "cli_explain": {
        "full": "Raised when a string has no end matching end character, ' or \". Uses the end of the line as the terminating point for the string",
        "example": ">>> str example :> 'hello world! (warning line)\n'hello world!'"
      }
    },
    "WT_FuncArgRet" : {
      "explain": "Cannot return passed in argument to function",
      "cli_explain": {
        "full": "",
        "example": ""
      }
    },
    "WT_FuncAssignOperator" : {
      "explain": "Cannot use an operator assignment for a function argument",
      "cli_explain": {
        "full": "",
        "example": ""
      }
    }
  },
  "global_opts": {
    "math": {
      "name": "math",
      "default": false
    },
    "log": {
      "name": "log",
      "default": true
    }
  },
  "config_file": {
    "wrapLength": {
      "default": 70,
      "invalid": {
        "small_number": "'wrapLength' must be larger than 25 as a minimum!",
        "not_number": "'{}' cannot be cast as an int and has been ignored!"
      }
    },
    "lang": {
      "default": "/fck/en",
      "invalid": {
        "not_lang": "'{}' is not a valid language file!"
      }
    },
    "error": {
      "blank_param": "Parameter '{}' was left blank! Used the default.",
      "unknown": "Parameter '{}' is an unknown parameter and has been ignored."
    }
  },
  "general": {
    "file": "file",
    "line": "line",
    "number": "number",
    "example": "example",
    "err_parse_key_err": "Error or warning '{}' is not a valid error or warning and has been ignored. sorry"
  }
}